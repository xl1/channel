// Generated by CoffeeScript 1.4.0
var $, Game, GameView, InfoBox, Logger, Model, Overlay, Reversi, ReversiView, View, main, uuid, xhrsend,
  __hasProp = {}.hasOwnProperty,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

$ = function(id) {
  return document.getElementById(id);
};

xhrsend = function(url, param, method, callback) {
  var key, params, value, xhr;
  if (method == null) {
    method = 'GET';
  }
  xhr = new XMLHttpRequest;
  if (method.toUpperCase() === 'GET') {
    params = ((function() {
      var _results;
      _results = [];
      for (key in param) {
        if (!__hasProp.call(param, key)) continue;
        value = param[key];
        _results.push("" + key + "=" + value);
      }
      return _results;
    })()).join('&');
    url += '?' + params;
    param = null;
  }
  xhr.open(method, url, true);
  xhr.onload = function() {
    return typeof calback === "function" ? calback(xhr.responseText) : void 0;
  };
  return xhr.send(param);
};

uuid = (function() {
  var re, replacer;
  re = /[xy]/g;
  replacer = function(c) {
    var r;
    r = Math.random() * 16 | 0;
    return (c === 'x' ? r : r & 3 | 8).toString(16);
  };
  return function() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(re, replacer).toUpperCase();
  };
})();

Model = (function() {

  function Model() {
    this.id = uuid();
  }

  Model.prototype.change = function() {
    return eve("" + this.id + ".change", null, this);
  };

  return Model;

})();

View = (function() {

  function View() {
    this.watch = __bind(this.watch, this);

  }

  View.prototype.render = function(model) {};

  View.prototype.watch = function(model) {
    if (this._model) {
      eve.off("" + this._model.id + ".change");
    }
    this._model = model;
    return eve.on("" + model.id + ".change", this.render.bind(this));
  };

  return View;

})();

Game = (function(_super) {

  __extends(Game, _super);

  Game.prototype.BASE_URL = '/channel/';

  Game.prototype.SIZE = 3;

  function Game() {
    Game.__super__.constructor.call(this);
    this.reset();
  }

  Game.prototype.reset = function() {
    var i;
    return this.field = (function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 1, _ref = this.SIZE * this.SIZE; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        _results.push('_');
      }
      return _results;
    }).call(this);
  };

  Game.prototype.setup = function(userId, mark) {
    this.userId = userId;
    this.mark = mark;
    return this.isMyTurn = this.mark === 'o';
  };

  Game.prototype.canPutPieceAt = function(index) {
    return this.isMyTurn && this.field[index] === '_';
  };

  Game.prototype.putPieceAt = function(index) {
    if (!this.canPutPieceAt(index)) {
      return;
    }
    this.field[index] = this.mark;
    this.change();
    return xhrsend(this.BASE_URL + 'put', {
      from: this.userId,
      x: index % this.SIZE,
      y: index / this.SIZE | 0
    });
  };

  Game.prototype.update = function(data) {
    if (data) {
      this.field = data.split('');
      this.isMyTurn = !this.isMyTurn;
    }
    return this.change();
  };

  return Game;

})(Model);

Reversi = (function(_super) {

  __extends(Reversi, _super);

  function Reversi() {
    return Reversi.__super__.constructor.apply(this, arguments);
  }

  Reversi.prototype.SIZE = 8;

  Reversi.prototype._at = function(x, y) {
    if (x < 0 || x >= this.SIZE || y < 0 || y >= this.SIZE) {
      return;
    }
    return this.field[x + y * this.SIZE];
  };

  Reversi.prototype.canPutPieceAt = function(index) {
    var dx, dy, i, mark, x, y, _i, _j, _len, _ref, _ref1;
    if (!(this.isMyTurn && this.field[index] === '_')) {
      return false;
    }
    x = index % this.SIZE;
    y = index / this.SIZE | 0;
    _ref = [[-1, 0], [-1, -1], [0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1]];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], dx = _ref1[0], dy = _ref1[1];
      mark = this._at(x + dx, y + dy);
      if (mark === this.mark || mark === '_' || !mark) {
        continue;
      }
      for (i = _j = 2; _j <= 7; i = ++_j) {
        mark = this._at(x + dx * i, y + dy * i);
        if (mark === '_' || !mark) {
          break;
        }
        if (mark === this.mark) {
          return true;
        }
      }
    }
    return false;
  };

  return Reversi;

})(Game);

GameView = (function(_super) {

  __extends(GameView, _super);

  function GameView() {
    GameView.__super__.constructor.call(this);
    this.parent = $('field');
  }

  GameView.prototype.watch = function(model) {
    var button, fragment, i, size, _i, _ref,
      _this = this;
    GameView.__super__.watch.call(this, model);
    size = model.SIZE;
    fragment = document.createDocumentFragment();
    for (i = _i = 0, _ref = size * size; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      button = document.createElement('div');
      button.classList.add('button');
      button.dataset.index = i;
      fragment.appendChild(button);
    }
    this.parent.appendChild(fragment);
    return this.parent.addEventListener('mouseup', function(e) {
      return model.putPieceAt(e.target.dataset.index | 0);
    }, false);
  };

  GameView.prototype.render = function(model) {
    var button, mark, _i, _len, _ref, _results;
    button = this.parent.firstChild;
    _ref = model.field;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      mark = _ref[_i];
      button.textContent = mark === '_' ? '' : mark;
      _results.push(button = button.nextSibling);
    }
    return _results;
  };

  return GameView;

})(View);

ReversiView = (function(_super) {

  __extends(ReversiView, _super);

  function ReversiView() {
    return ReversiView.__super__.constructor.apply(this, arguments);
  }

  ReversiView.prototype.render = function(model) {
    var button, clist, mark, _i, _len, _ref, _results;
    button = this.parent.firstChild;
    _ref = model.field;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      mark = _ref[_i];
      clist = button.classList;
      clist.remove('piece-o');
      clist.remove('piece-x');
      if (mark === 'o') {
        clist.add('piece-o');
      } else if (mark === 'x') {
        clist.add('piece-x');
      }
      _results.push(button = button.nextSibling);
    }
    return _results;
  };

  return ReversiView;

})(GameView);

InfoBox = (function(_super) {

  __extends(InfoBox, _super);

  function InfoBox() {
    InfoBox.__super__.constructor.call(this);
    this.elem = $('info');
  }

  InfoBox.prototype.watch = function(model) {
    var div, name, _i, _len, _ref, _results;
    InfoBox.__super__.watch.call(this, model);
    _ref = ['left', 'right', 'black', 'white'];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      div = document.createElement('div');
      div.className = name;
      this.elem.appendChild(div);
      _results.push(this[name] = div);
    }
    return _results;
  };

  InfoBox.prototype.render = function(model) {
    var black, data, mark, white;
    mark = model.mark;
    data = model.field.join('');
    black = data.split('x').length - 1;
    white = data.split('o').length - 1;
    this.left.innerText = "" + (mark === 'x' ? 'あなた' : 'あいて') + "/黒: " + black;
    this.right.innerText = "" + (mark === 'o' ? 'あなた' : 'あいて') + "/白: " + white;
    this.black.style.width = black * 100 / 64 + '%';
    this.white.style.width = white * 100 / 64 + '%';
    if (model.isMyTurn ^ (mark === 'o')) {
      this.left.classList.add('on-turn');
      this.right.classList.remove('on-turn');
    } else {
      this.right.classList.add('on-turn');
      this.left.classList.remove('on-turn');
    }
    return this.left.style.maxWidth = this.right.style.maxWidth = '400px';
  };

  InfoBox.prototype.show = function(message) {
    this.left.classList.remove('on-turn');
    this.right.classList.remove('on-turn');
    this.left.innerText = message;
    return this.right.innerText = ' ';
  };

  return InfoBox;

})(View);

Overlay = (function() {

  function Overlay() {
    this.elem = $('overlay');
  }

  Overlay.prototype.show = function(text) {
    var _this = this;
    this.elem.textContent = text;
    this.elem.className = 'show';
    return setTimeout(function() {
      return _this.elem.className = '';
    }, 2000);
  };

  return Overlay;

})();

Logger = (function() {

  function Logger() {
    this.elem = $('logger');
  }

  Logger.prototype.log = function(text) {
    var div;
    div = document.createElement('div');
    div.textContent = text;
    return this.elem.insertBefore(div, this.elem.firstChild);
  };

  return Logger;

})();

main = function() {
  var channel, channelToken, game, gameView, id, info, logger, overlay, socket, type, _ref, _ref1, _ref2;
  _ref = document.body.dataset, id = _ref.id, channelToken = _ref.channelToken, type = _ref.type;
  if (type === 'reversi') {
    _ref1 = [new Reversi, new ReversiView, new InfoBox], game = _ref1[0], gameView = _ref1[1], info = _ref1[2];
    gameView.watch(game);
    info.watch(game);
    info.show('相手のユーザーを待っています……');
  } else if (type === 'tictactoe') {
    _ref2 = [new Game, new GameView], game = _ref2[0], gameView = _ref2[1];
    gameView.watch(game);
  }
  overlay = new Overlay;
  logger = new Logger;
  channel = new goog.appengine.Channel(channelToken);
  socket = channel.open();
  socket.onopen = function() {
    return logger.log('open');
  };
  return socket.onmessage = function(e) {
    var data, dummy, m, mark, opponentID, winner;
    data = e.data;
    logger.log(data);
    if (data === 'please try again') {
      return info.show('やり直してください');
    } else if (m = data.match(/found opponent (\w+) you are (o|x)/)) {
      dummy = m[0], opponentID = m[1], mark = m[2];
      return game.setup(id, mark);
    } else if (data === 'Not Your Turn!' || data === 'Wrong Place') {
      return game.update();
    } else if (m = data.match(/(\w+) has Won/)) {
      dummy = m[0], winner = m[1];
      if (winner === id) {
        return overlay.show('おめでとう、あなたの勝ちです');
      } else {
        return overlay.show('残念、あなたの負けです...');
      }
    } else if (data === 'Match Drawn') {
      return overlay.show('ひきわけになりました');
    } else if (data.match(/^[_ox]+$/)) {
      return game.update(data);
    } else if (data === 'connection lost with opponent') {
      if (info != null) {
        info.show('相手のユーザーが切断されました');
      }
      return game.reset();
    }
  };
};

main();
